'''
Created on 17 —è–Ω–≤. 2017 –≥.

@author: –°–µ—Ä–≥–µ–π
'''

import telebot
import constants
import random
import urllib
from urllib.request import urlopen
from bs4 import BeautifulSoup

bot = telebot.TeleBot(constants.token)

upd = bot.get_updates()
print("\n____________")
print(bot.get_me())

#group_list = {"–í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞¬†–í –ú":1, "–í–æ–ª–Ω—É—Ö–∏–Ω –í –í":2, "–ì—Ä—ã–∑–ª–æ–≤ –ü –î":3, "–î–∞—Ä—É—Ç–∫–∏–Ω –ö –ê":4, "–ï—Ä–Ω–µ–µ–≤ –≠ –ú":5, "–ö–∞—Ä–∞–ø–µ—Ç—è–Ω –ì –õ":6, "–õ–µ–≥–∫–∞—è –ê –°":7, "–õ–∏—Ç–≤–∞–∫ –ê –ü":8, "–ú–∞—Ä—á–µ–Ω–∫–æ–≤ –° –î":9, "–ü—Ä–æ—Ö–æ—Ä–æ–≤ –ú –í":10, "–ü—Ä–æ—Ö–æ—Ä–æ–≤ –î –î":11, "–°–∞–º–æ—Ä—É–∫–æ–≤ –ê –ú":12, "–°–∞–ø—Ä–æ–Ω–æ–≤ –ï –û":13, "–°–≤–æ–π–∫–∏–Ω–∞ –ê –ì":14, "–°–∏–Ω–æ—Ç–æ–≤–∞ –û –í":15, "–°—É–Ω–¥—É–≥–µ–µ–≤ –ù –ê":16, "–®–∞–ø–∫–∏–Ω –ê –°":17, "–Ø—Å–Ω–æ–≤ –ê –ò":18}

def log(message, answer):
    print("\n____________")
    from datetime import datetime
    print(datetime.now())
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0} {1}. (id = {2}) \n–¢–µ–∫—Å—Ç: {3}".format(message.from_user.first_name,
                                                                 message.from_user.last_name,
                                                                 str(message.from_user.id),
                                                                 message.text ))
    print(answer)
    
    
def get_week():
    url_bmstu = urlopen(constants.url_schedule).read()
    soup = BeautifulSoup(url_bmstu, "lxml")
    for paragraph in soup.findAll('h4'):
        schedule_week = paragraph.string    
    return schedule_week

def get_shedule_ch():
    url_bmstu = urlopen(constants.url_schedule).read()
    soup = BeautifulSoup(url_bmstu, "lxml")
    i = 0
    answer_ch = '–ß–° üìö\n'
    divs = soup.find_all('div', attrs = {"class":"col-md-6 hidden-xs"})
    for div in divs:
        trs = div.find_all('tr')
        for tr in trs:
            td_time = tr.find_all('td', attrs={"class":"bg-grey text-nowrap"})
            lesson_success = tr.find_all('td', attrs={"class":"text-success"})
            lesson_info = tr.find_all('td', attrs={"class":"text-info"})
            lesson_ordinary = tr.find_all('td', attrs={"colspan":"2"})
            days = tr.find_all('strong')
            time = [i.text for i in td_time]
            lesson_cheslitel = [les.text for les in lesson_success]
            lesson_znamenatel = [les.text for les in lesson_info]
            lesson_ordinary = [les.text for les in lesson_ordinary]
            day = [day.text for day in days]
            
            list = (day + time + lesson_cheslitel + lesson_ordinary).__str__()
            answer_ch += '<b>{}</b>,\n {}'.format(day.__str__(), list)#day.__str__() + '\n' + list
            
            i = i + 2
        answer_ch += '\nüìã'
    answer_ch = answer_ch.replace('xa0', '')
    answer_ch = answer_ch.replace('[', '') 
    answer_ch = answer_ch.replace(']', '')
    answer_ch = answer_ch.replace("'", '')   
    answer_ch = answer_ch.replace("\n\n", '')        
    return  answer_ch
 
def get_shedule_zn():
    url_bmstu = urlopen(constants.url_schedule).read()
    soup = BeautifulSoup(url_bmstu, "lxml")
    i = 0
    answer_zn = '–ó–ù üìö\n'
    divs = soup.find_all('div', attrs = {"class":"col-md-6 hidden-sm hidden-md hidden-lg"})
    for div in divs:
        trs = div.find_all('tr')
        for tr in trs:
            td_time = tr.find_all('td', attrs={"class":"bg-grey text-nowrap"})
            lesson_success = tr.find_all('td', attrs={"class":"text-success"})
            lesson_info = tr.find_all('td', attrs={"class":"text-info"})
            lesson_ordinary = tr.find_all('td', attrs={"colspan":"2"})
            days = tr.find_all('strong')
            time = [i.text for i in td_time]
            lesson_cheslitel = [les.text for les in lesson_success]
            lesson_znamenatel = [les.text for les in lesson_info]
            lesson_ordinary = [les.text for les in lesson_ordinary]
            day = [day.text for day in days]
            
            list = (time + lesson_znamenatel + lesson_ordinary).__str__()
            answer_zn += day.__str__() + '\n' + list
            
            i = i + 2 
        answer_zn += '\nüìã'
    answer_zn = answer_zn.replace('xa0', '')
    answer_zn = answer_zn.replace('[', '') 
    answer_zn = answer_zn.replace(']', '')
    answer_zn = answer_zn.replace("'", '')  
    answer_zn = answer_zn.replace("\n\n", '')   
    return  answer_zn
    
@bot.message_handler(commands = ['help'])
def handle_help(message):
    bot.send_message(message.chat.id, '–¢–µ–±–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç üòà \n\nP.S.\n–ö–æ–º–∞–Ω–¥–∞ "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç–∞–ª—É bmstu.wiki, –ø–∏—à–∏—Ç–µ "–ö—Ç–æ —Ç–∞–∫–æ–π –§–ò–û?"\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ "—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã"\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" –∏–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è"\n–ê –µ—Å–ª–∏ –í—ã –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å –∏ –Ω–µ –Ω–∞–π–¥—ë—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —Å–ø—Ä–æ—Å–∏—Ç–µ "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è [‚Ññ–∞—É–¥.]" ')
        
@bot.message_handler(commands = ['start'])
def handle_start(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('/start', '/stop')
    user_markup.row('—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã', '–¥–∏—Å–∫', '–Ω–µ–¥–µ–ª—è (—á/–∑)')
    user_markup.row('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Å–µ–≥–æ–¥–Ω—è' )
    bot.send_message(message.from_user.id, "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å...", reply_markup=user_markup)
    
@bot.message_handler(commands = ['stop'])
def handle_stop(message):   
     hide_markup = telebot.types.ReplyKeyboardRemove()
     bot.send_message(message.from_user.id, "...", reply_markup = hide_markup)

@bot.message_handler(content_types = ['text'])
def handle_text(message):
        answer = "–ù–µ –ø–æ–Ω—è—Ç–Ω–æü§î  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        msg = message.text
        if msg == '–¥–∏—Å–∫' :
            answer = 'https://drive.google.com/open?id=0Bwpp4JuViU2KNWpic3loeGlPeHM'
            log(message, answer)
            bot.send_message(message.chat.id, answer)   
        elif msg == '–Ω–µ–¥–µ–ª—è (—á/–∑)' :
            '''from datetime import date
            today = date.today()
            month = today.strftime("%b")
            day = today.strftime("%d")'''
            answer = get_week()
            log(message, answer)
            bot.send_message(message.chat.id, answer) 
        elif msg == '—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã' :
            answer = "—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã –ò–£8-" + (constants.sem).__str__() + "2:\n"
            i = 0
            for student in constants.group_list:
                answer += '\n' + (i+1).__str__() + '.  ' + constants.group_list[i]
                i = i + 1            
            log(message, answer)
            bot.send_message(message.chat.id, answer)   
        elif msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' :
            if (get_week().find('—á–∏—Å–ª–∏—Ç–µ–ª—å', 0)>=0):
               answer = get_shedule_ch()
            elif (get_week().find('–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å', 0)>=0): 
                answer = get_shedule_zn()
            log(message, answer)
            bot.send_message(message.chat.id, answer, parse_mode='HTML')   
        elif msg == '—Å–µ–≥–æ–¥–Ω—è' :
            answer = '–í—ä —Å–∞–ª–æ–Ω—£ —Ç–∏—Ö–æ, –ø—ã–ª—å–Ω–æ –∏ –ø—É—Å—Ç–æ.\n–¢–æ–ª—å–∫–æ –≤—ä –æ–¥–Ω–æ–º—ä –∏–∑—ä —É–≥–ª–æ–≤—ä –≤—ã—à–∏–≤–∞–µ—Ç—ä –≥–ª–∞–¥—å—é –ø–æ–∂–∏–ª–∞—è –∫–Ω—è–∂–Ω–∞.'
            log(message, answer)
            bot.send_message(message.chat.id, answer)              
        elif ((msg.find('–∫—Ç–æ —Ç–∞–∫–æ–π', 0)>=0) | (msg.find('–∫—Ç–æ —Ç–∞–∫–∞—è', 0)>=0) | (msg.find('–ö—Ç–æ —Ç–∞–∫–æ–π', 0)>=0) | (msg.find('–ö—Ç–æ —Ç–∞–∫–∞—è', 0)>=0)):
            str = msg.replace('?', '')
            str = str.replace('–ö—Ç–æ', '')
            str = str.replace('–∫—Ç–æ', '')
            str = str.replace('—Ç–∞–∫–æ–π', '') 
            str = str.replace('—Ç–∞–∫–∞—è', '') 
            #—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ wiki
            answer = constants.wiki + str
            log(message, answer)
            bot.send_message(message.chat.id, answer)  
        elif ((msg.find('—Å—Ç—É–¥–µ–Ω—Ç', 0)>=0) | (msg.find('–ú–ì–¢–£', 0)>=0) | (msg.find('–º–≥—Ç—É', 0)>=0) | (msg.find('–±–∞—É–º–∞–Ω–∫', 0)>=0) | (msg.find('—Å–¥–∞—Å—Ç', 0)>=0) | (msg.find('—Å–¥–∞–¥–∏–º', 0)>=0)):
            answer = "–ê–≥–∞\n"
            answer += constants.loud_tips[random.randint(0,10)]
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('–∞–∫–∞–¥–µ–º', 0)>=0) | (msg.find('–ê–∫–∞–¥–µ–º', 0)>=0)):
            answer = constants.academ_tips[random.randint(0,4)]
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('–∞—Ö–∞', 0)>=0) | (msg.find('ü§ó', 0)>=0) | (msg.find('üòÄ', 0)>=0) | (msg.find('üò¨', 0)>=0) | (msg.find('üòÅ', 0)>=0) | (msg.find('üòÇ', 1)>=0) | (msg.find('üòÉ', 0)>=0) | (msg.find('üòâ', 0)>=0) | (msg.find('üòÑ', 0)>=0) | (msg.find('üòÖ', 0)>=0) | (msg.find('üòÜ', 0)>=0) | (msg.find('üòä', 0)>=0) | (msg.find('‚ò∫Ô∏è', 0)>=0) | (msg.find('üòú', 0)>=0) | (msg.find('üòé', 0)>=0)):
            answer = "‚ò∫Ô∏è üòâ"
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('üòû', 0)>=0) | (msg.find('üòü', 0)>=0) | (msg.find('‚òπÔ∏è', 0)>=0) | (msg.find('üôÅ', 0)>=0) | (msg.find('üò£', 1)>=0) | (msg.find('üòñ', 0)>=0) | (msg.find('üò©', 0)>=0) | (msg.find('üò§', 0)>=0) | (msg.find('üòß', 0)>=0) | (msg.find('üòØ', 0)>=0) | (msg.find('üò®', 0)>=0) | (msg.find('üò≠', 0)>=0) | (msg.find('üò™', 0)>=0) | (msg.find('üò¢', 0)>=0) | (msg.find('ü§ï', 0)>=0) | (msg.find('ü§í', 0)>=0)):
            answer = "üòØ üòû "
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('—Ä–∫', 0)>=0) | (msg.find('–†–ö', 0)>=0) | (msg.find('–∂—É–∫–æ–≤', 0)>=0) | (msg.find('–ñ—É–∫–æ–≤', 0)>=0)):
            answer = '!@#$%&'
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        else:
            log(message, answer) #—É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º!!!
            bot.send_message(message.chat.id, answer)
            

    
bot.polling(none_stop = True)

