'''
Created on 17 —è–Ω–≤. 2017 –≥.

@author: sminux
'''

import telebot
import constants
import random
import datetime
from urllib.request import urlopen
from bs4 import BeautifulSoup

bot = telebot.TeleBot(constants.token)

upd = bot.get_updates()
print("\n____________")
print(bot.get_me())

def log(message, answer):
    print("\n____________")
    from datetime import datetime
    print(datetime.now())
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0} {1}. (id = {2}) \n–¢–µ–∫—Å—Ç: {3}".format(message.from_user.first_name,
                                                                 message.from_user.last_name,
                                                                 str(message.from_user.id),
                                                                 message.text ))
    print(answer)
    
    
def get_week():
    url_bmstu = urlopen(constants.url_schedule).read()
    soup = BeautifulSoup(url_bmstu, "lxml")
    for paragraph in soup.findAll('h4'):
        schedule_week = paragraph.string    
    return schedule_week

def get_shedule_ch():
    url_bmstu = urlopen(constants.url_schedule).read()
    soup = BeautifulSoup(url_bmstu, "lxml")
    answer_ch = '–ß–° üìö\n'
    divs = soup.find_all('div', attrs = {"class":"col-md-6 hidden-xs"})
    for div in divs:
        answer_ch  += 'üìã'
        trs = div.find_all('tr')
        for tr in trs:
            td_time = tr.find_all('td', attrs={"class":"bg-grey text-nowrap"})
            lesson_success = tr.find_all('td', attrs={"class":"text-success"})
            lesson_ordinary = tr.find_all('td', attrs={"colspan":"2"})
            days = tr.find_all('strong')
            time = [i.text for i in td_time]
            lesson_cheslitel = [les.text for les in lesson_success]
            lesson_ordinary = [les.text for les in lesson_ordinary]
            day = [day.text for day in days]
            
            answer_ch += '<b>{}</b>\n<b>{}</b> {}{}'.format(day,
                                                                time,
                                                                lesson_cheslitel,
                                                                lesson_ordinary)

        answer_ch += '\n'
    answer_ch = answer_ch.replace('\\xa0', ' ')
    answer_ch = answer_ch.replace('[', '')
    answer_ch = answer_ch.replace(']', '')
    answer_ch = answer_ch.replace("'", '')
    answer_ch = answer_ch.replace("<b></b> <b></b>", '')
    answer_ch = answer_ch.replace("\n\n", '')        
    return  answer_ch
 
def get_shedule_zn():
    url_bmstu = urlopen(constants.url_schedule).read()
    soup = BeautifulSoup(url_bmstu, "lxml")

    answer_zn = '–ó–ù üìö\n'
    divs = soup.find_all('div', attrs = {"class":"col-md-6 hidden-sm hidden-md hidden-lg"})
    for div in divs:
        answer_zn += 'üìã'
        trs = div.find_all('tr')
        for tr in trs:
            td_time = tr.find_all('td', attrs={"class":"bg-grey text-nowrap"})
            lesson_info = tr.find_all('td', attrs={"class":"text-info"})
            lesson_ordinary = tr.find_all('td', attrs={"colspan":"2"})
            days = tr.find_all('strong')
            time = [i.text for i in td_time]
            lesson_znamenatel = [les.text for les in lesson_info]
            lesson_ordinary = [les.text for les in lesson_ordinary]
            day = [day.text for day in days]
            
            answer_zn += '<b>{}</b>\n<b>{}</b> {}{}'.format(day,
                                                            time,
                                                            lesson_znamenatel,
                                                            lesson_ordinary)

        answer_zn += '\n'
    answer_zn = answer_zn.replace('\\xa0', ' ')
    answer_zn = answer_zn.replace('[', '')
    answer_zn = answer_zn.replace(']', '')
    answer_zn = answer_zn.replace("'", '')
    answer_zn = answer_zn.replace("<b></b> <b></b>", '')
    answer_zn = answer_zn.replace("\n\n", '')
    return  answer_zn

@bot.message_handler(commands = ['help'])
def handle_help(message):
    bot.send_message(message.chat.id, '–¢–µ–±–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç üòà \nP.S.\nüîò–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç–∞–ª—É ru.bmstu.wiki, –ø–∏—à–∏—Ç–µ "–ö—Ç–æ —Ç–∞–∫–æ–π –§–ò–û?"\nüîò–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ "—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã"\nüîò–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –Ω–∞ –Ω–µ–¥–µ–ª—é\nüîò–ö–æ–º–∞–Ω–¥–∞ "–Ω–æ–≤–æ—Å—Ç–∏" –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—É\n‚ÑπÔ∏è–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ—Ä—É: @sminux')
        
@bot.message_handler(commands = ['start'])
def handle_start(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('/start', '/stop', '/news')
    user_markup.row('—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã', '–¥–∏—Å–∫', '–Ω–µ–¥–µ–ª—è (—á/–∑)')
    user_markup.row('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Å–µ–≥–æ–¥–Ω—è' )
    bot.send_message(message.chat.id, "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å...", reply_markup=user_markup)
    
@bot.message_handler(commands = ['stop'])
def handle_stop(message):   
     hide_markup = telebot.types.ReplyKeyboardRemove()
     bot.send_message(message.chat.id, "...", reply_markup = hide_markup)
     
@bot.message_handler(commands = ['news'])
def handle_news(message):   
        answer = '–í—ä —Å–∞–ª–æ–Ω—£ —Ç–∏—Ö–æ, –ø—ã–ª—å–Ω–æ –∏ –ø—É—Å—Ç–æ.\n–¢–æ–ª—å–∫–æ –≤—ä –æ–¥–Ω–æ–º—ä –∏–∑—ä —É–≥–ª–æ–≤—ä –≤—ã—à–∏–≤–∞–µ—Ç—ä –≥–ª–∞–¥—å—é –ø–æ–∂–∏–ª–∞—è –∫–Ω—è–∂–Ω–∞.'
        url_news = urlopen('https://vk.com/pr.bmstu').read()
        soup = BeautifulSoup(url_news, "lxml")
        news = soup.find('div', attrs={"class": "pi_text"})
        answer = 'üì∞' + news.text
        log(message, answer)
        bot.send_message(message.chat.id, answer) 

@bot.message_handler(content_types = ['text'])
def handle_text(message):
        answer = "–ù–µ –ø–æ–Ω—è—Ç–Ω–æü§î  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        msg = message.text
        if msg == '–¥–∏—Å–∫':
            answer = 'https://drive.google.com/open?id=0Bwpp4JuViU2KNWpic3loeGlPeHM'
            log(message, answer)
            bot.send_message(message.chat.id, answer)   
        elif msg == '–Ω–µ–¥–µ–ª—è (—á/–∑)':
            '''from datetime import date
            today = date.today()
            month = today.strftime("%b")
            day = today.strftime("%d")'''
            answer = get_week()
            log(message, answer)
            bot.send_message(message.chat.id, answer) 
            img = open('Plan.png', 'rb')               
            bot.send_photo(message.chat.id, img)
            img.close()
        elif msg == '—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã':
            answer = "—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã –ò–£8-" + (constants.sem).__str__() + "2:"
            i = 0
            for student in constants.group_list:
                answer += '\n' + (i+1).__str__() + '.  ' + constants.group_list[i]
                i = i + 1            
            log(message, answer)
            bot.send_message(message.chat.id, answer)   
        elif msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            answer = 'üì• –ó–∞–≥—Ä—É–∂–∞—é...'
            log(message, answer)
            bot.send_message(message.chat.id, answer)  
            if (get_week().find('—á–∏—Å–ª–∏—Ç–µ–ª—å', 0)>=0):
               answer = get_shedule_ch()
            elif (get_week().find('–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å', 0)>=0): 
                answer = get_shedule_zn()
            log(message, answer)
            bot.send_message(message.chat.id, answer, parse_mode='HTML')  
        elif msg == '—Å–µ–≥–æ–¥–Ω—è':
            if (datetime.datetime.today().isoweekday()==1):
                img = open('/Schedule/1.png', 'rb')               
                bot.send_photo(message.chat.id, img)
                img.close()
            elif (datetime.datetime.today().isoweekday()==2): 
                img = open('/Schedule/2.png', 'rb')               
                bot.send_photo(message.chat.id, img)
                img.close()
            elif (datetime.datetime.today().isoweekday()==3): 
                img = open('/Schedule/3.png', 'rb')               
                bot.send_photo(message.chat.id, img)
                img.close()
            elif (datetime.datetime.today().isoweekday()==4): 
                img = open('/Schedule/4.png', 'rb')               
                bot.send_photo(message.chat.id, img)
                img.close()
            elif (datetime.datetime.today().isoweekday()==5): 
                img = open('/Schedule/5.png', 'rb')               
                bot.send_photo(message.chat.id, img)
                img.close()
            elif (datetime.datetime.today().isoweekday()==6): 
                img = open('/Schedule/6.png', 'rb')               
                bot.send_photo(message.chat.id, img)
                img.close()  
            else:
                answer = '–í—ä —Å–∞–ª–æ–Ω—£ —Ç–∏—Ö–æ, –ø—ã–ª—å–Ω–æ –∏ –ø—É—Å—Ç–æ.\n–¢–æ–ª—å–∫–æ –≤—ä –æ–¥–Ω–æ–º—ä –∏–∑—ä —É–≥–ª–æ–≤—ä –≤—ã—à–∏–≤–∞–µ—Ç—ä –≥–ª–∞–¥—å—é –ø–æ–∂–∏–ª–∞—è –∫–Ω—è–∂–Ω–∞.'
                log(message, answer)
                bot.send_message(message.chat.id, answer)  
            
        elif ((msg.find('–∫—Ç–æ —Ç–∞–∫–æ–π', 0)>=0) | (msg.find('–∫—Ç–æ —Ç–∞–∫–∞—è', 0)>=0) | (msg.find('–ö—Ç–æ —Ç–∞–∫–æ–π', 0)>=0) | (msg.find('–ö—Ç–æ —Ç–∞–∫–∞—è', 0)>=0)):
            str = msg.replace("?", '')
            str = str.replace(',', '')
            str = str.replace('.', '')
            str = str.replace('/', '')
            str = str.replace('&', '')
            str = str.replace('–ö—Ç–æ', '')
            str = str.replace('–∫—Ç–æ', '')
            str = str.replace('—Ç–∞–∫–æ–π', '') 
            str = str.replace('—Ç–∞–∫–∞—è', '')
            text = ''
            fio = str.split(' ')
            if len(fio) != 5:
                text = '–ú–Ω–µ –Ω—É–∂–Ω—ã –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ [–§–ò–û]. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.'
            elif len(fio) == 5:
                text = constants.wiki + fio[2].capitalize() + ',_' + fio[3].capitalize() + '_' + fio[4].capitalize()

            answer = text
            log(message, answer)
            bot.send_message(message.chat.id, answer)  
        elif ((msg.find('—Å—Ç—É–¥–µ–Ω—Ç', 0)>=0) | (msg.find('–ú–ì–¢–£', 0)>=0) | (msg.find('–º–≥—Ç—É', 0)>=0) | (msg.find('–±–∞—É–º–∞–Ω–∫', 0)>=0) | (msg.find('—Å–¥–∞—Å—Ç', 0)>=0) | (msg.find('—Å–¥–∞–¥–∏–º', 0)>=0)):
            answer = "–ê–≥–∞\n"
            answer += constants.loud_tips[random.randint(0,10)]
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('–∞–∫–∞–¥–µ–º', 0)>=0) | (msg.find('–ê–∫–∞–¥–µ–º', 0)>=0)):
            answer = constants.academ_tips[random.randint(0,4)]
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('–∞—Ö–∞', 0)>=0) | (msg.find('ü§ó', 0)>=0) | (msg.find('üòÄ', 0)>=0) | (msg.find('üò¨', 0)>=0) | (msg.find('üòÅ', 0)>=0) | (msg.find('üòÇ', 1)>=0) | (msg.find('üòÉ', 0)>=0) | (msg.find('üòâ', 0)>=0) | (msg.find('üòÑ', 0)>=0) | (msg.find('üòÖ', 0)>=0) | (msg.find('üòÜ', 0)>=0) | (msg.find('üòä', 0)>=0) | (msg.find('‚ò∫Ô∏è', 0)>=0) | (msg.find('üòú', 0)>=0) | (msg.find('üòé', 0)>=0)):
            answer = "‚ò∫Ô∏è üòâ"
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('üòû', 0)>=0) | (msg.find('üòü', 0)>=0) | (msg.find('‚òπÔ∏è', 0)>=0) | (msg.find('üôÅ', 0)>=0) | (msg.find('üò£', 1)>=0) | (msg.find('üòñ', 0)>=0) | (msg.find('üò©', 0)>=0) | (msg.find('üò§', 0)>=0) | (msg.find('üòß', 0)>=0) | (msg.find('üòØ', 0)>=0) | (msg.find('üò®', 0)>=0) | (msg.find('üò≠', 0)>=0) | (msg.find('üò™', 0)>=0) | (msg.find('üò¢', 0)>=0) | (msg.find('ü§ï', 0)>=0) | (msg.find('ü§í', 0)>=0)):
            answer = "üòØ üòû "
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        elif ((msg.find('—Ä–∫', 0)>=0) | (msg.find('–†–ö', 0)>=0) | (msg.find('–∂—É–∫–æ–≤', 0)>=0) | (msg.find('–ñ—É–∫–æ–≤', 0)>=0)):
            answer = '!@#$%&'
            log(message, answer)
            bot.send_message(message.chat.id, answer)
        else:
            log(message, answer) 
            bot.send_message(message.chat.id, answer)
            

    
bot.polling(none_stop = True)

